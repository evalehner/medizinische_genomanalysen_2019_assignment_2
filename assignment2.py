#! /usr/bin/env python3

import vcf
import subprocess
import shlex

__author__ = 'Eva V. Lehner'

vcfFile_IN = '../data/chr22_new.vcf'
vcfFile2 = '../data/chr21_new.vcf'

class Assignment2:
    
    def __init__(self, vcfFile, vcfFile_to_Merge, mergedFilename):
        ## Check if pyvcf is installed
        print("PyVCF version: %s" % vcf.VERSION)
        self.currentVCF = vcfFile
        self.VCF2Merge = vcfFile_to_Merge
        self.mergedVCF = mergedFilename

    def get_average_quality_of_file(self):
        # Get the average PHRED quality of all variants
        # PHRED quality of variant is at col 6

        vcfReader = vcf.Reader(open(self.currentVCF), 'r')

        totalQuality = 0
        nEntries = 0
        for record in vcfReader:
            totalQuality += record.QUAL
            nEntries += 1

        averageQuality = totalQuality / nEntries
        return averageQuality

    def get_total_number_of_variants_of_file(self, file ):

        file = self.currentVCF
        vcfReader = vcf.Reader(open(file), 'r')

        nVariants = 0
        for record in vcfReader:
            nVariants += 1
        return nVariants

    def get_variant_caller_of_vcf(self):
        # Return the variant caller name
        # VCF was generated by multiple valiant callers info is in col 8, accessed with .INFO function
        setVariantCallers = set()
        vcfReader = vcf.Reader(open(self.currentVCF), 'r')
        for record in vcfReader:
            allInfos = record.INFO
            currentCallsetnames= allInfos['callsetnames']
            setVariantCallers.update(currentCallsetnames)

        return setVariantCallers

    def get_human_reference_version(self):
        # printing is ugly
        # does probably not work for every vcf?

        reference = ""
        vcfReader = vcf.Reader(open(self.currentVCF), 'r')
        for record in vcfReader:
            allInfos = record.INFO
            dificultRegion = str(allInfos['difficultregion'])
            reference = dificultRegion.split('_')[0]
            break

        return reference

    def get_number_of_indels(self):
        indelCount = 0
        vcfReader = vcf.Reader(open(self.currentVCF), 'r')
        for record in vcfReader:
            if record.is_indel:
                indelCount +=1
        return indelCount

    def get_number_of_snvs(self):
        # Return the number of SNVs
        nSNVs = 0
        vcfReader = vcf.Reader(open(self.currentVCF), 'r')
        for record in vcfReader:
            if record.is_snp:
                nSNVs += 1
        return nSNVs
        
    def get_number_of_heterozygous_variants(self):
        # Return the number of heterozygous variants

        nheterozygous = 0
        vcfReader = vcf.Reader(open(self.currentVCF), 'r')
        for record in vcfReader:
            nheterozygous += record.num_het
        return nheterozygous
        
    
    def merge_chrs_into_one_vcf(self):
        '''
        Creates one VCF containing all variants of chr21 and chr22
        :return:
        '''
        f_out = open(self.mergedVCF, 'w+')
        f_in1 = open(self.currentVCF, 'r')
        f_in2 = open(self.VCF2Merge, 'r')

        for line in f_in1.readlines():
            f_out.write(line)
        for line in f_in2.readlines():
            f_out.write(line)
        f_out.close()
        f_in1.close()
        f_in2.close()

        ntotalVariants = self.get_total_number_of_variants_of_file(self.mergedVCF)

        print("Number of total variants in merged File \n\t  %s " % (ntotalVariants))

    def print_summary(self):
        print("Summary Statistics: \n average phred Quality of variants: %s  " % (self.get_average_quality_of_file()))
        print("List of Variant Callers generating this vcf : \n\t  %s  " % (self.get_variant_caller_of_vcf()))
        print("Reference Genome used: \n\t  %s  " % (self.get_human_reference_version()))
        print("Total Number of Variants: \n\t  %s  " % (self.get_total_number_of_variants_of_file(self.currentVCF)))
        print("Number of Indels: \n\t  %s  " % (self.get_number_of_indels()))
        print("Number of SNVs / SNPs: \n\t  %s " % (self.get_number_of_snvs()))
        print("Number of Heterozygous Variants: \n\t  %s  " % (self.get_number_of_heterozygous_variants()))
        self.merge_chrs_into_one_vcf()

def main():
    print("Assignment 2")
    assignment2 = Assignment2(vcfFile_IN, vcfFile2, "MergedFile_Test.vcf")
    assignment2.print_summary()
    print("Done with assignment 2")
        
        
if __name__ == '__main__':
    main()
   
    



